// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2024 22:03:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          IDA_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IDA_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] access_size;
reg [31:0] rawaddress;
reg [31:0] rawdata;
reg rw;
// wires                                               
wire access_flag;
wire aligned_flag;
wire [3:0] byte_en;
wire [31:0] memadd;
wire [31:0] memdata;

// assign statements (if any)                          
IDA_test i1 (
// port map - connection between master ports and signals/registers   
	.access_flag(access_flag),
	.access_size(access_size),
	.aligned_flag(aligned_flag),
	.byte_en(byte_en),
	.memadd(memadd),
	.memdata(memdata),
	.rawaddress(rawaddress),
	.rawdata(rawdata),
	.rw(rw)
);
initial 
begin 
#1500000 $finish;
end 
// access_size[ 1 ]
initial
begin
	access_size[1] = 1'b0;
	access_size[1] = #400000 1'b1;
	access_size[1] = #400000 1'b0;
	access_size[1] = #400000 1'b1;
end 
// access_size[ 0 ]
initial
begin
	repeat(3)
	begin
		access_size[0] = 1'b0;
		access_size[0] = #200000 1'b1;
		# 200000;
	end
	access_size[0] = 1'b0;
	access_size[0] = #200000 1'b1;
end 

// rw
initial
begin
	rw = 1'b1;
end 
endmodule

