// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2024 02:25:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ERV24
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ERV24_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg nreset;
// wires                                               
wire alu_n;
wire alu_z;
wire branch_taken;
wire [23:0] decoded_pc;
wire [23:0] instr;
wire jmp_en;
wire [11:0] PC_wr;
wire pc_wr_flag;
wire predicted_taken;
wire [2:0] ra_funct3;
wire [15:0] ra_rs1;
wire [23:0] regacc_imm;
wire [11:0] regacc_pc;

// assign statements (if any)                          
ERV24 i1 (
// port map - connection between master ports and signals/registers   
	.alu_n(alu_n),
	.alu_z(alu_z),
	.branch_taken(branch_taken),
	.clk(clk),
	.decoded_pc(decoded_pc),
	.instr(instr),
	.jmp_en(jmp_en),
	.nreset(nreset),
	.PC_wr(PC_wr),
	.pc_wr_flag(pc_wr_flag),
	.predicted_taken(predicted_taken),
	.ra_funct3(ra_funct3),
	.ra_rs1(ra_rs1),
	.regacc_imm(regacc_imm),
	.regacc_pc(regacc_pc)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// nreset
initial
begin
	nreset = 1'b0;
	nreset = #130000 1'b1;
end 
endmodule

