// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 00:03:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ERV24
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ERV24_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] treg_GPIO;
reg nreset;
// wires                                               
wire alu_en;
wire [2:0] alu_f3;
wire alu_pred_taken;
wire alu_rd_en;
wire alu_z;
wire [7:0] alua;
wire [7:0] alub;
wire aluibranch;
wire aluisel;
wire branch_taken;
wire fetch_en;
wire [7:0] GPIO;
wire gpioen;
wire [7:0] immed;
wire [11:0] instr;
wire jmpen;
wire [7:0] PC;
wire pc_wr_flag;
wire pred_taken_dec;
wire predicted_taken;
wire [4:0] rd;
wire rd_en;
wire [7:0] rddata;
wire reg_pred_taken;
wire val;

// assign statements (if any)                          
assign GPIO = treg_GPIO;
ERV24 i1 (
// port map - connection between master ports and signals/registers   
	.alu_en(alu_en),
	.alu_f3(alu_f3),
	.alu_pred_taken(alu_pred_taken),
	.alu_rd_en(alu_rd_en),
	.alu_z(alu_z),
	.alua(alua),
	.alub(alub),
	.aluibranch(aluibranch),
	.aluisel(aluisel),
	.branch_taken(branch_taken),
	.clk(clk),
	.fetch_en(fetch_en),
	.GPIO(GPIO),
	.gpioen(gpioen),
	.immed(immed),
	.instr(instr),
	.jmpen(jmpen),
	.nreset(nreset),
	.PC(PC),
	.pc_wr_flag(pc_wr_flag),
	.pred_taken_dec(pred_taken_dec),
	.predicted_taken(predicted_taken),
	.rd(rd),
	.rd_en(rd_en),
	.rddata(rddata),
	.reg_pred_taken(reg_pred_taken),
	.val(val)
);
initial 
begin 
#30000000 $finish;
end 

// nreset
initial
begin
	nreset = 1'b0;
	nreset = #20000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// GPIO[ 7 ]
initial
begin
	treg_GPIO[7] = 1'bZ;
	treg_GPIO[7] = #3999000 1'b0;
end 
// GPIO[ 6 ]
initial
begin
	treg_GPIO[6] = 1'bZ;
	treg_GPIO[6] = #3999000 1'b0;
end 
// GPIO[ 5 ]
initial
begin
	treg_GPIO[5] = 1'bZ;
	treg_GPIO[5] = #3999000 1'b0;
end 
// GPIO[ 4 ]
initial
begin
	treg_GPIO[4] = 1'bZ;
	treg_GPIO[4] = #3999000 1'b0;
end 
// GPIO[ 3 ]
initial
begin
	treg_GPIO[3] = 1'bZ;
	treg_GPIO[3] = #3999000 1'b0;
end 
// GPIO[ 2 ]
initial
begin
	treg_GPIO[2] = 1'bZ;
	treg_GPIO[2] = #3999000 1'b0;
end 
// GPIO[ 1 ]
initial
begin
	treg_GPIO[1] = 1'bZ;
	treg_GPIO[1] = #3999000 1'b0;
end 
// GPIO[ 0 ]
initial
begin
	treg_GPIO[0] = 1'bZ;
	treg_GPIO[0] = #3999000 1'b0;
end 
endmodule

