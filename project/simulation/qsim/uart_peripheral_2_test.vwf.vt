// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/24/2024 18:25:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uart_peripheral_2_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uart_peripheral_2_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] address;
reg [3:0] byteEN;
reg clk;
reg [31:0] datain;
reg en;
reg rst;
reg rw;
reg rxin;
// wires                                               
wire [31:0] dataout;
wire txout;

// assign statements (if any)                          
uart_peripheral_2_test i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.byteEN(byteEN),
	.clk(clk),
	.datain(datain),
	.dataout(dataout),
	.en(en),
	.rst(rst),
	.rw(rw),
	.rxin(rxin),
	.txout(txout)
);
initial 
begin 
#100000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #250000 1'b1;
	#250000;
end 

// en
initial
begin
	en = 1'b0;
	en = #3200000 1'b1;
	en = #640000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #1600000 1'b0;
end 

// rw
initial
begin
	rw = 1'b0;
end 

// rxin
initial
begin
	rxin = 1'b0;
end 
// address[ 31 ]
initial
begin
	address[31] = 1'b0;
end 
// address[ 30 ]
initial
begin
	address[30] = 1'b0;
end 
// address[ 29 ]
initial
begin
	address[29] = 1'b0;
end 
// address[ 28 ]
initial
begin
	address[28] = 1'b0;
end 
// address[ 27 ]
initial
begin
	address[27] = 1'b0;
end 
// address[ 26 ]
initial
begin
	address[26] = 1'b0;
end 
// address[ 25 ]
initial
begin
	address[25] = 1'b0;
end 
// address[ 24 ]
initial
begin
	address[24] = 1'b0;
end 
// address[ 23 ]
initial
begin
	address[23] = 1'b0;
end 
// address[ 22 ]
initial
begin
	address[22] = 1'b0;
end 
// address[ 21 ]
initial
begin
	address[21] = 1'b0;
end 
// address[ 20 ]
initial
begin
	address[20] = 1'b0;
end 
// address[ 19 ]
initial
begin
	address[19] = 1'b0;
end 
// address[ 18 ]
initial
begin
	address[18] = 1'b0;
end 
// address[ 17 ]
initial
begin
	address[17] = 1'b0;
end 
// address[ 16 ]
initial
begin
	address[16] = 1'b0;
end 
// address[ 15 ]
initial
begin
	address[15] = 1'b0;
end 
// address[ 14 ]
initial
begin
	address[14] = 1'b0;
end 
// address[ 13 ]
initial
begin
	address[13] = 1'b0;
end 
// address[ 12 ]
initial
begin
	address[12] = 1'b0;
end 
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
end 
// datain[ 31 ]
initial
begin
	datain[31] = 1'b0;
end 
// datain[ 30 ]
initial
begin
	datain[30] = 1'b0;
end 
// datain[ 29 ]
initial
begin
	datain[29] = 1'b0;
end 
// datain[ 28 ]
initial
begin
	datain[28] = 1'b0;
end 
// datain[ 27 ]
initial
begin
	datain[27] = 1'b0;
end 
// datain[ 26 ]
initial
begin
	datain[26] = 1'b0;
end 
// datain[ 25 ]
initial
begin
	datain[25] = 1'b0;
end 
// datain[ 24 ]
initial
begin
	datain[24] = 1'b0;
end 
// datain[ 23 ]
initial
begin
	datain[23] = 1'b0;
end 
// datain[ 22 ]
initial
begin
	datain[22] = 1'b0;
end 
// datain[ 21 ]
initial
begin
	datain[21] = 1'b0;
end 
// datain[ 20 ]
initial
begin
	datain[20] = 1'b0;
end 
// datain[ 19 ]
initial
begin
	datain[19] = 1'b0;
end 
// datain[ 18 ]
initial
begin
	datain[18] = 1'b0;
end 
// datain[ 17 ]
initial
begin
	datain[17] = 1'b0;
end 
// datain[ 16 ]
initial
begin
	datain[16] = 1'b0;
end 
// datain[ 15 ]
initial
begin
	datain[15] = 1'b0;
end 
// datain[ 14 ]
initial
begin
	datain[14] = 1'b0;
end 
// datain[ 13 ]
initial
begin
	datain[13] = 1'b0;
end 
// datain[ 12 ]
initial
begin
	datain[12] = 1'b0;
end 
// datain[ 11 ]
initial
begin
	datain[11] = 1'b0;
end 
// datain[ 10 ]
initial
begin
	datain[10] = 1'b0;
end 
// datain[ 9 ]
initial
begin
	datain[9] = 1'b0;
end 
// datain[ 8 ]
initial
begin
	datain[8] = 1'b0;
end 
// datain[ 7 ]
initial
begin
	datain[7] = 1'b0;
end 
// datain[ 6 ]
initial
begin
	datain[6] = 1'b1;
end 
// datain[ 5 ]
initial
begin
	datain[5] = 1'b1;
end 
// datain[ 4 ]
initial
begin
	datain[4] = 1'b1;
end 
// datain[ 3 ]
initial
begin
	datain[3] = 1'b1;
end 
// datain[ 2 ]
initial
begin
	datain[2] = 1'b1;
end 
// datain[ 1 ]
initial
begin
	datain[1] = 1'b1;
end 
// datain[ 0 ]
initial
begin
	datain[0] = 1'b0;
end 
endmodule

