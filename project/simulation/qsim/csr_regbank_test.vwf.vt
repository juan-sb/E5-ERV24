// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2024 02:57:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          csr_regbank
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module csr_regbank_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg csr_rd;
reg [3:0] csr_sel;
reg [31:0] csrwr;
reg nrst;
reg [1:0] rw_mode;
// wires                                               
wire [31:0] csrrd;

// assign statements (if any)                          
csr_regbank i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.csr_rd(csr_rd),
	.csr_sel(csr_sel),
	.csrrd(csrrd),
	.csrwr(csrwr),
	.nrst(nrst),
	.rw_mode(rw_mode)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// nrst
initial
begin
	nrst = 1'b0;
	nrst = #30000 1'b1;
end 
// csr_sel[ 3 ]
initial
begin
	csr_sel[3] = 1'b0;
end 
// csr_sel[ 2 ]
initial
begin
	csr_sel[2] = 1'b1;
	csr_sel[2] = #330000 1'b0;
end 
// csr_sel[ 1 ]
initial
begin
	csr_sel[1] = 1'b0;
	csr_sel[1] = #330000 1'b1;
end 
// csr_sel[ 0 ]
initial
begin
	csr_sel[0] = 1'b0;
	csr_sel[0] = #330000 1'b1;
end 
// rw_mode[ 1 ]
initial
begin
	rw_mode[1] = 1'b0;
	rw_mode[1] = #140000 1'b1;
	rw_mode[1] = #270000 1'b0;
	rw_mode[1] = #190000 1'b1;
	rw_mode[1] = #190000 1'b0;
end 
// rw_mode[ 0 ]
initial
begin
	rw_mode[0] = 1'b1;
	rw_mode[0] = #140000 1'b0;
	rw_mode[0] = #460000 1'b1;
end 
// csrwr[ 31 ]
initial
begin
	csrwr[31] = 1'b0;
	csrwr[31] = #410000 1'b1;
end 
// csrwr[ 30 ]
initial
begin
	csrwr[30] = 1'b0;
	csrwr[30] = #410000 1'b1;
end 
// csrwr[ 29 ]
initial
begin
	csrwr[29] = 1'b0;
	csrwr[29] = #410000 1'b1;
end 
// csrwr[ 28 ]
initial
begin
	csrwr[28] = 1'b0;
	csrwr[28] = #260000 1'b1;
end 
// csrwr[ 27 ]
initial
begin
	csrwr[27] = 1'b0;
	csrwr[27] = #410000 1'b1;
end 
// csrwr[ 26 ]
initial
begin
	csrwr[26] = 1'b0;
	csrwr[26] = #410000 1'b1;
end 
// csrwr[ 25 ]
initial
begin
	csrwr[25] = 1'b0;
	csrwr[25] = #260000 1'b1;
end 
// csrwr[ 24 ]
initial
begin
	csrwr[24] = 1'b0;
	csrwr[24] = #410000 1'b1;
end 
// csrwr[ 23 ]
initial
begin
	csrwr[23] = 1'b0;
	csrwr[23] = #410000 1'b1;
end 
// csrwr[ 22 ]
initial
begin
	csrwr[22] = 1'b0;
	csrwr[22] = #410000 1'b1;
end 
// csrwr[ 21 ]
initial
begin
	csrwr[21] = 1'b0;
	csrwr[21] = #260000 1'b1;
end 
// csrwr[ 20 ]
initial
begin
	csrwr[20] = 1'b0;
	csrwr[20] = #260000 1'b1;
end 
// csrwr[ 19 ]
initial
begin
	csrwr[19] = 1'b0;
	csrwr[19] = #410000 1'b1;
end 
// csrwr[ 18 ]
initial
begin
	csrwr[18] = 1'b0;
	csrwr[18] = #260000 1'b1;
end 
// csrwr[ 17 ]
initial
begin
	csrwr[17] = 1'b0;
	csrwr[17] = #410000 1'b1;
end 
// csrwr[ 16 ]
initial
begin
	csrwr[16] = 1'b0;
	csrwr[16] = #410000 1'b1;
end 
// csrwr[ 15 ]
initial
begin
	csrwr[15] = 1'b0;
	csrwr[15] = #410000 1'b1;
end 
// csrwr[ 14 ]
initial
begin
	csrwr[14] = 1'b0;
	csrwr[14] = #260000 1'b1;
end 
// csrwr[ 13 ]
initial
begin
	csrwr[13] = 1'b0;
	csrwr[13] = #410000 1'b1;
end 
// csrwr[ 12 ]
initial
begin
	csrwr[12] = 1'b0;
	csrwr[12] = #260000 1'b1;
end 
// csrwr[ 11 ]
initial
begin
	csrwr[11] = 1'b0;
	csrwr[11] = #410000 1'b1;
end 
// csrwr[ 10 ]
initial
begin
	csrwr[10] = 1'b0;
	csrwr[10] = #260000 1'b1;
end 
// csrwr[ 9 ]
initial
begin
	csrwr[9] = 1'b0;
	csrwr[9] = #260000 1'b1;
end 
// csrwr[ 8 ]
initial
begin
	csrwr[8] = 1'b0;
	csrwr[8] = #410000 1'b1;
end 
// csrwr[ 7 ]
initial
begin
	csrwr[7] = 1'b0;
	csrwr[7] = #410000 1'b1;
end 
// csrwr[ 6 ]
initial
begin
	csrwr[6] = 1'b0;
	csrwr[6] = #260000 1'b1;
end 
// csrwr[ 5 ]
initial
begin
	csrwr[5] = 1'b0;
	csrwr[5] = #260000 1'b1;
end 
// csrwr[ 4 ]
initial
begin
	csrwr[4] = 1'b1;
	csrwr[4] = #140000 1'b0;
	csrwr[4] = #120000 1'b1;
end 
// csrwr[ 3 ]
initial
begin
	csrwr[3] = 1'b0;
	csrwr[3] = #140000 1'b1;
end 
// csrwr[ 2 ]
initial
begin
	csrwr[2] = 1'b0;
	csrwr[2] = #410000 1'b1;
end 
// csrwr[ 1 ]
initial
begin
	csrwr[1] = 1'b1;
	csrwr[1] = #140000 1'b0;
	csrwr[1] = #270000 1'b1;
end 
// csrwr[ 0 ]
initial
begin
	csrwr[0] = 1'b0;
	csrwr[0] = #140000 1'b1;
	csrwr[0] = #120000 1'b0;
	csrwr[0] = #150000 1'b1;
end 
endmodule

