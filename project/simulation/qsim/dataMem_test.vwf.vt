// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/09/2024 00:26:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dataMem_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dataMem_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] access_size;
reg clk;
reg ena_mem;
reg [31:0] rawaddress;
reg [31:0] rawdata;
reg rw;
// wires                                               
wire [31:0] memout;

// assign statements (if any)                          
dataMem_test i1 (
// port map - connection between master ports and signals/registers   
	.access_size(access_size),
	.clk(clk),
	.ena_mem(ena_mem),
	.memout(memout),
	.rawaddress(rawaddress),
	.rawdata(rawdata),
	.rw(rw)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// ena_mem
initial
begin
	ena_mem = 1'b0;
	ena_mem = #110000 1'b1;
	ena_mem = #50000 1'b0;
	ena_mem = #50000 1'b1;
end 

// rw
initial
begin
	rw = 1'b0;
	rw = #210000 1'b1;
end 
// access_size[ 1 ]
initial
begin
	access_size[1] = 1'b1;
end 
// access_size[ 0 ]
initial
begin
	access_size[0] = 1'b0;
end 
// rawaddress[ 31 ]
initial
begin
	rawaddress[31] = 1'b0;
end 
// rawaddress[ 30 ]
initial
begin
	rawaddress[30] = 1'b0;
end 
// rawaddress[ 29 ]
initial
begin
	rawaddress[29] = 1'b0;
end 
// rawaddress[ 28 ]
initial
begin
	rawaddress[28] = 1'b0;
end 
// rawaddress[ 27 ]
initial
begin
	rawaddress[27] = 1'b0;
end 
// rawaddress[ 26 ]
initial
begin
	rawaddress[26] = 1'b0;
end 
// rawaddress[ 25 ]
initial
begin
	rawaddress[25] = 1'b0;
end 
// rawaddress[ 24 ]
initial
begin
	rawaddress[24] = 1'b0;
end 
// rawaddress[ 23 ]
initial
begin
	rawaddress[23] = 1'b0;
end 
// rawaddress[ 22 ]
initial
begin
	rawaddress[22] = 1'b0;
end 
// rawaddress[ 21 ]
initial
begin
	rawaddress[21] = 1'b0;
end 
// rawaddress[ 20 ]
initial
begin
	rawaddress[20] = 1'b0;
end 
// rawaddress[ 19 ]
initial
begin
	rawaddress[19] = 1'b0;
end 
// rawaddress[ 18 ]
initial
begin
	rawaddress[18] = 1'b0;
end 
// rawaddress[ 17 ]
initial
begin
	rawaddress[17] = 1'b0;
end 
// rawaddress[ 16 ]
initial
begin
	rawaddress[16] = 1'b0;
end 
// rawaddress[ 15 ]
initial
begin
	rawaddress[15] = 1'b0;
end 
// rawaddress[ 14 ]
initial
begin
	rawaddress[14] = 1'b0;
end 
// rawaddress[ 13 ]
initial
begin
	rawaddress[13] = 1'b0;
end 
// rawaddress[ 12 ]
initial
begin
	rawaddress[12] = 1'b0;
end 
// rawaddress[ 11 ]
initial
begin
	rawaddress[11] = 1'b0;
end 
// rawaddress[ 10 ]
initial
begin
	rawaddress[10] = 1'b0;
end 
// rawaddress[ 9 ]
initial
begin
	rawaddress[9] = 1'b0;
end 
// rawaddress[ 8 ]
initial
begin
	rawaddress[8] = 1'b0;
end 
// rawaddress[ 7 ]
initial
begin
	rawaddress[7] = 1'b0;
end 
// rawaddress[ 6 ]
initial
begin
	rawaddress[6] = 1'b0;
end 
// rawaddress[ 5 ]
initial
begin
	rawaddress[5] = 1'b0;
end 
// rawaddress[ 4 ]
initial
begin
	rawaddress[4] = 1'b0;
end 
// rawaddress[ 3 ]
initial
begin
	rawaddress[3] = 1'b0;
end 
// rawaddress[ 2 ]
initial
begin
	rawaddress[2] = 1'b0;
end 
// rawaddress[ 1 ]
initial
begin
	rawaddress[1] = 1'b0;
end 
// rawaddress[ 0 ]
initial
begin
	rawaddress[0] = 1'b1;
end 
// rawdata[ 31 ]
initial
begin
	rawdata[31] = 1'b1;
end 
// rawdata[ 30 ]
initial
begin
	rawdata[30] = 1'b0;
end 
// rawdata[ 29 ]
initial
begin
	rawdata[29] = 1'b0;
end 
// rawdata[ 28 ]
initial
begin
	rawdata[28] = 1'b0;
end 
// rawdata[ 27 ]
initial
begin
	rawdata[27] = 1'b0;
end 
// rawdata[ 26 ]
initial
begin
	rawdata[26] = 1'b1;
end 
// rawdata[ 25 ]
initial
begin
	rawdata[25] = 1'b1;
end 
// rawdata[ 24 ]
initial
begin
	rawdata[24] = 1'b1;
end 
// rawdata[ 23 ]
initial
begin
	rawdata[23] = 1'b0;
end 
// rawdata[ 22 ]
initial
begin
	rawdata[22] = 1'b1;
end 
// rawdata[ 21 ]
initial
begin
	rawdata[21] = 1'b1;
end 
// rawdata[ 20 ]
initial
begin
	rawdata[20] = 1'b0;
end 
// rawdata[ 19 ]
initial
begin
	rawdata[19] = 1'b0;
end 
// rawdata[ 18 ]
initial
begin
	rawdata[18] = 1'b1;
end 
// rawdata[ 17 ]
initial
begin
	rawdata[17] = 1'b0;
end 
// rawdata[ 16 ]
initial
begin
	rawdata[16] = 1'b1;
end 
// rawdata[ 15 ]
initial
begin
	rawdata[15] = 1'b0;
end 
// rawdata[ 14 ]
initial
begin
	rawdata[14] = 1'b1;
end 
// rawdata[ 13 ]
initial
begin
	rawdata[13] = 1'b0;
end 
// rawdata[ 12 ]
initial
begin
	rawdata[12] = 1'b0;
end 
// rawdata[ 11 ]
initial
begin
	rawdata[11] = 1'b0;
end 
// rawdata[ 10 ]
initial
begin
	rawdata[10] = 1'b0;
end 
// rawdata[ 9 ]
initial
begin
	rawdata[9] = 1'b1;
end 
// rawdata[ 8 ]
initial
begin
	rawdata[8] = 1'b1;
end 
// rawdata[ 7 ]
initial
begin
	rawdata[7] = 1'b0;
end 
// rawdata[ 6 ]
initial
begin
	rawdata[6] = 1'b0;
end 
// rawdata[ 5 ]
initial
begin
	rawdata[5] = 1'b1;
end 
// rawdata[ 4 ]
initial
begin
	rawdata[4] = 1'b0;
end 
// rawdata[ 3 ]
initial
begin
	rawdata[3] = 1'b0;
end 
// rawdata[ 2 ]
initial
begin
	rawdata[2] = 1'b0;
end 
// rawdata[ 1 ]
initial
begin
	rawdata[1] = 1'b0;
end 
// rawdata[ 0 ]
initial
begin
	rawdata[0] = 1'b1;
end 
endmodule

