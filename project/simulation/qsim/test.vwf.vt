// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2024 15:34:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ERV24
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ERV24_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg nreset;
// wires                                               
wire [7:0] ALU_a;
wire [7:0] ALU_b;
wire [7:0] ALU_c;
wire alu_latch;
wire [3:0] alu_pc;
wire [15:0] bus_c;
wire [11:0] decflags;
wire decoded_latch;
wire [11:0] decoded_pc;
wire [4:0] decoded_rd;
wire fetch_en;
wire [28:0] instr;
wire jmpctrl_ena;
wire pc_wr;
wire [4:0] postalu_rd;
wire regacc_latch;
wire [3:0] regacc_pc;
wire [4:0] regacc_rd;
wire [4:0] rs1;
wire [4:0] rs2;

// assign statements (if any)                          
ERV24 i1 (
// port map - connection between master ports and signals/registers   
	.ALU_a(ALU_a),
	.ALU_b(ALU_b),
	.ALU_c(ALU_c),
	.alu_latch(alu_latch),
	.alu_pc(alu_pc),
	.bus_c(bus_c),
	.clk(clk),
	.decflags(decflags),
	.decoded_latch(decoded_latch),
	.decoded_pc(decoded_pc),
	.decoded_rd(decoded_rd),
	.fetch_en(fetch_en),
	.instr(instr),
	.jmpctrl_ena(jmpctrl_ena),
	.nreset(nreset),
	.pc_wr(pc_wr),
	.postalu_rd(postalu_rd),
	.regacc_latch(regacc_latch),
	.regacc_pc(regacc_pc),
	.regacc_rd(regacc_rd),
	.rs1(rs1),
	.rs2(rs2)
);
initial 
begin 
#2000000 $finish;
end 

// clk
initial
begin
	repeat(2)
	begin
		clk = 1'b0;
		clk = #50000 1'b1;
		# 50000;
	end
	clk = 1'b0;
	clk = #70000 1'b1;
	# 10000;
	repeat(86)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
end 

// nreset
initial
begin
	nreset = 1'b0;
	nreset = #180000 1'b1;
end 
endmodule

