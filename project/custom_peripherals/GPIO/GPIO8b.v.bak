programmodule GPIO_8bit (
	input address,
	input [3:0] byte_en,
	input [1:0] 
	input [31:0] data,
	input rw,
	input clken,
	input clk,
	input rst,
	output reg [31:0] q,
	inout wire[7:0] port
);

wire [7:0] in_port;

reg [31:0] word0 = {PTOR, PCOR, PSOR, PDOR};
reg [31:0] word1 = {16'b0, PDDR, PDIR};

wire [7:0] PDOR = word0[7:0];
wire [7:0] PSOR = word0[15:8];
wire [7:0] PCOR = word0[23:16];
wire [7:0] PTOR = word0[31:24];
wire [7:0] PDIR = word1[7:0];
wire [7:0] PDDR = word1[15:8];
/*
localparam PDOR_addr = 10'b000; // Port Data Output Register
localparam PSOR_addr = 10'b001; // Port Set Output Register
localparam PCOR_addr = 10'b010; // Port Clear Output Register
localparam PTOR_addr = 10'b011; // Port Toggle Output Register
localparam PDIR_addr = 10'b100; // Port Data Input Register
localparam PDDR_addr = 10'b101; // Port Data Direction Register
*/
genvar i;
generate
	for(i=0; i < 8; i = i+1) begin : generation_block
		alt_iobuf io0 (.i(PDOR[i]), .oe(PDDR[i]), .o(in_port[i]), .io(port[i]));
		defparam io0.io_standard = "3.3-V PCI";
		defparam io0.current_strength = "minimum current";
		// defparam io0.slow_slew_rate = "on";
		// defparam io0.location = "iobank_1";
	end
endgenerate
// alt_iobuf [WIDTH-1:0] port_iobufs (.i(out_port), .oe(oe_port), .o(in_port), .io(port));
/*
defparam my_iobuf.io_standard = "3.3-V PCI";
defparam my_iobuf.current_strength = "minimum current";
defparam my_iobuf.slow_slew_rate = "on";
defparam my_iobuf.location = "iobank_1";
*/

always @ (posedge clk or posedge rst)
begin
	if(rst) begin
		out_port = 0;
		oe_port = 0;
	end
	else if(clken) begin
		if(rw) begin
			if(address) q <= word1;
			else q <= word0;
		end
		else begin
			if(address) begin
				case(byte_en)
					4'b1111: word1 <= data;
					4'b0011: word1[15:0] <= data[15:0];
					4'b0001: word1[7:0] <= data[7:0];
					4'b0010: word1[15:8] <= data[7:0];
					default: ;
				endcase
			end else begin
				case(byte_en)
					4'b1111: word0 <= data;
					4'b0011: word0[15:0] <= data[15:0];
//					4'b0110: word0[23:8] <= data[15:0];
					4'b1100: word0[31:16] <= data[15:0];
					4'b0001: word0[7:0] <= data[7:0];
					4'b0010: word0[15:8] <= data[7:0];
					4'b0100: word0[23:16] <= data[7:0];
					4'b1000: word0[31:24] <= data[7:0];
					default: ;
				endcase
			end
		end
	end
end


endmodule